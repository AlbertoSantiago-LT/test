git commit guarda los cambios que est√°n en el staging area 
(preparados con git add) en el historial del repositorio, creando un snapshot permanente.

| Opci√≥n                      | Funci√≥n                                                                                                                      |
| --------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |
| `-m "mensaje"`              | Especifica el mensaje del commit directamente desde la l√≠nea de comandos.                                                    |
| `-a`                        | A√±ade autom√°ticamente todos los archivos modificados y rastreados **antes de hacer el commit** (no incluye nuevos archivos). |
| `--amend`                   | Modifica el √∫ltimo commit (mensaje o archivos). Muy √∫til para corregir errores sin crear uno nuevo.                          |
| `-v`                        | Muestra el diff de los cambios en el editor al hacer commit. √ötil para revisar.                                              |
| `--no-edit`                 | Usa el mismo mensaje del commit anterior al hacer `--amend`, sin abrir el editor.                                            |
| `--allow-empty`             | Permite hacer un commit sin cambios (√∫til para marcar un punto en el historial).                                             |
| `--allow-empty-message`     | Permite commits sin mensaje. No recomendado salvo en casos muy espec√≠ficos.                                                  |
| `--author="Nombre <email>"` | Especifica manualmente el autor del commit (sin cambiar la configuraci√≥n global).                                            |
| `--date="fecha"`            | Establece manualmente la fecha del commit. √ötil para scripts o reproducir cambios.                                           |
| `--squash <commit>`         | Prepara un commit para hacer *squash* de otro. Se usa dentro de flujos como `rebase`.                                        |
| `--fixup <commit>`          | Marca el commit como una correcci√≥n para otro. Usado con `rebase --autosquash`.                                              |
| `--reset-author`            | Al hacer `--amend`, reemplaza el autor anterior por el actual.                                                               |
| `--cleanup=<modo>`          | Controla c√≥mo Git limpia los comentarios en el mensaje del commit (`strip`, `whitespace`, `verbatim`, etc.).                 |
| `--quiet` / `-q`            | Minimiza la salida (salida silenciosa).                                                                                      |
| `--verbose`                 | Muestra detalles del diff al hacer el commit.                                                                                |

üîß Ejemplos pr√°cticos
Commit r√°pido con mensaje
    - git commit -m "A√±adir funcionalidad de login"

Commit con auto-add de archivos modificados (pero no nuevos)
    - git commit -a -m "Corregir errores menores"

Modificar el √∫ltimo commit (mensaje o archivos)
    - git commit --amend
Corregir solo el mensaje del √∫ltimo commit
    - git commit --amend -m "Mensaje corregido"
Hacer un commit vac√≠o
    - git commit --allow-empty -m "Marca de implementaci√≥n inicial"
Forzar autor espec√≠fico
    - git commit --author="Ana Dev <ana@ejemplo.com>" -m "Commit con autor personalizado"

üõ†Ô∏è Flujo com√∫n para arreglar el √∫ltimo commit
Cambias algo que olvidaste.

Lo agregas:
    - git add archivo-olvidado.txt
Y lo metes en el √∫ltimo commit sin crear uno nuevo:
    - git commit --amend --no-edit
